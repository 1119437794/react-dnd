{"ast":null,"code":"import _slicedToArray from \"/Users/christrevino/Workspace/react-dnd/packages/documentation/static/examples_ts/00-chessboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar knightPosition = [1, 7];\nvar observers = [];\n\nfunction emitChange() {\n  observers.forEach(function (o) {\n    return o && o(knightPosition);\n  });\n}\n\nexport function observe(o) {\n  observers.push(o);\n  emitChange();\n  return function () {\n    observers = observers.filter(function (t) {\n      return t !== o;\n    });\n  };\n}\nexport function canMoveKnight(toX, toY) {\n  var _knightPosition = knightPosition,\n      _knightPosition2 = _slicedToArray(_knightPosition, 2),\n      x = _knightPosition2[0],\n      y = _knightPosition2[1];\n\n  var dx = toX - x;\n  var dy = toY - y;\n  return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n}\nexport function moveKnight(toX, toY) {\n  knightPosition = [toX, toY];\n  emitChange();\n}","map":{"version":3,"sources":["/Users/christrevino/Workspace/react-dnd/packages/documentation/static/examples_ts/00-chessboard/src/Game.ts"],"names":["knightPosition","observers","emitChange","forEach","o","observe","push","filter","t","canMoveKnight","toX","toY","x","y","dx","dy","Math","abs","moveKnight"],"mappings":";AAAA,IAAIA,cAAgC,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAvC;AACA,IAAIC,SAA6B,GAAG,EAApC;;AAGA,SAASC,UAAT,GAAsB;AACrBD,EAAAA,SAAS,CAACE,OAAV,CAAkB,UAAAC,CAAC;AAAA,WAAIA,CAAC,IAAIA,CAAC,CAACJ,cAAD,CAAV;AAAA,GAAnB;AACA;;AAED,OAAO,SAASK,OAAT,CAAiBD,CAAjB,EAAsC;AAC5CH,EAAAA,SAAS,CAACK,IAAV,CAAeF,CAAf;AACAF,EAAAA,UAAU;AAEV,SAAO,YAAM;AACZD,IAAAA,SAAS,GAAGA,SAAS,CAACM,MAAV,CAAiB,UAAAC,CAAC;AAAA,aAAIA,CAAC,KAAKJ,CAAV;AAAA,KAAlB,CAAZ;AACA,GAFD;AAGA;AAED,OAAO,SAASK,aAAT,CAAuBC,GAAvB,EAAoCC,GAApC,EAAiD;AAAA,wBACxCX,cADwC;AAAA;AAAA,MAChDY,CADgD;AAAA,MAC7CC,CAD6C;;AAEvD,MAAMC,EAAE,GAAGJ,GAAG,GAAGE,CAAjB;AACA,MAAMG,EAAE,GAAGJ,GAAG,GAAGE,CAAjB;AAEA,SACEG,IAAI,CAACC,GAAL,CAASH,EAAT,MAAiB,CAAjB,IAAsBE,IAAI,CAACC,GAAL,CAASF,EAAT,MAAiB,CAAxC,IACCC,IAAI,CAACC,GAAL,CAASH,EAAT,MAAiB,CAAjB,IAAsBE,IAAI,CAACC,GAAL,CAASF,EAAT,MAAiB,CAFzC;AAIA;AAED,OAAO,SAASG,UAAT,CAAoBR,GAApB,EAAiCC,GAAjC,EAA8C;AACpDX,EAAAA,cAAc,GAAG,CAACU,GAAD,EAAMC,GAAN,CAAjB;AACAT,EAAAA,UAAU;AACV","sourcesContent":["let knightPosition: [number, number] = [1, 7]\nlet observers: PositionObserver[] = []\nexport type PositionObserver = ((position: [number, number]) => void) | null\n\nfunction emitChange() {\n\tobservers.forEach(o => o && o(knightPosition))\n}\n\nexport function observe(o: PositionObserver) {\n\tobservers.push(o)\n\temitChange()\n\n\treturn () => {\n\t\tobservers = observers.filter(t => t !== o)\n\t}\n}\n\nexport function canMoveKnight(toX: number, toY: number) {\n\tconst [x, y] = knightPosition\n\tconst dx = toX - x\n\tconst dy = toY - y\n\n\treturn (\n\t\t(Math.abs(dx) === 2 && Math.abs(dy) === 1) ||\n\t\t(Math.abs(dx) === 1 && Math.abs(dy) === 2)\n\t)\n}\n\nexport function moveKnight(toX: number, toY: number) {\n\tknightPosition = [toX, toY]\n\temitChange()\n}\n"]},"metadata":{},"sourceType":"module"}