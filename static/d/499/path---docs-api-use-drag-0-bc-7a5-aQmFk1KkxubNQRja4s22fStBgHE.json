{"data":{"currentPage":{"html":"<h2>EXPERIMENTAL API - UNSTABLE</h2>\n<p><em>New to React DnD? <a href=\"/react-dnd/docs/overview\">Read the overview</a> before jumping into the docs.</em></p>\n<h1>useDrag</h1>\n<p>A hook to use the current component as a drag-source.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> __EXPERIMENTAL_DND_HOOKS_THAT_MAY_CHANGE_AND_BREAK_MY_BUILD__ <span class=\"token keyword\">as</span> dnd <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dnd'</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> useDrag <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> dnd\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DraggableComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>collectedProps<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDrag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\titem<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Parameters</h4>\n<ul>\n<li><strong><code class=\"language-text\">spec</code></strong> Specification object, see below for details on how to construct this</li>\n</ul>\n<h4>Return Value Array</h4>\n<ul>\n<li><strong><code class=\"language-text\">Index 0</code></strong>: An object containing collected properties from the collect function. If no <code class=\"language-text\">collect</code> function is defined, an empty object is returned.</li>\n<li><strong><code class=\"language-text\">Index 1</code></strong>: The React ref to use. This is automatically created if no <code class=\"language-text\">ref</code> field is defined on the specification object. The ref must be attached to the draggable portion of the DOM.</li>\n</ul>\n<h3>Specification Object Members</h3>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">item</code></strong>: Required. A plain JavaScript object describing the data being dragged. This is the <em>only</em> information available to the drop targets about the drag source so it's important to pick the <em>minimal</em> data they need to know. You may be tempted to put a complex reference here, but you should try very hard to avoid doing this because it couples the drag sources and drop targets. It's a good idea to return something like <code class=\"language-text\">{ type, id }</code> from this method.</p>\n<p><code class=\"language-text\">item.type</code> <strong>must be set</strong>, and it must be either a string, an ES6 symbol`. Only the <a href=\"/react-dnd/docs/api/drop-target\">drop targets</a> registered for the same type will react to this item. Read the <a href=\"/react-dnd/docs/overview\">overview</a> to learn more about the items and types.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">ref</code></strong>: Optional. A ref object to use to attach to the draggable element. If this is unset, one will be created ad returned.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">preview</code></strong>: Optional. An HTML Element or a ref object attached to the dragPreview element. Consider using the <code class=\"language-text\">useDragPreview</code> hook to create this for you.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">previewOptions</code></strong>: Optional. A plain JavaScript object describing drag preview options.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">options</code></strong>: Optional. A plain object. If some of the props to your component are not scalar (that is, are not primitive values or functions), specifying a custom<code class=\"language-text\">arePropsEqual(props, otherProps)</code>function inside the<code class=\"language-text\">options</code> object can improve the performance. Unless you have performance problems, don't worry about it.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">begin(monitor)</code></strong>: Optional. Fired when a drag operation begins. Nothing needs to be returned, but if an object is returned it will override the default <code class=\"language-text\">item</code> property of the spec.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">end(monitor)</code></strong>: Optional. When the dragging stops, <code class=\"language-text\">end</code> is called. For every <code class=\"language-text\">begin</code> call, a corresponding <code class=\"language-text\">end</code> call is guaranteed. You may call <code class=\"language-text\">monitor.didDrop()</code> to check whether or not the drop was handled by a compatible drop target. If it was handled, and the drop target specified a <em>drop result</em> by returning a plain object from its <code class=\"language-text\">drop()</code> method, it will be available as <code class=\"language-text\">monitor.getDropResult()</code>. This method is a good place to fire a Flux action. <em>Note: If the component is unmounted while dragging, <code class=\"language-text\">component</code> parameter is set to be <code class=\"language-text\">null</code>.</em></p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">canDrag(monitor)</code></strong>: Optional. Use it to specify whether the dragging is currently allowed. If you want to always allow it, just omit this method. Specifying it is handy if you'd like to disable dragging based on some predicate over <code class=\"language-text\">props</code>. <em>Note: You may not call <code class=\"language-text\">monitor.canDrag()</code> inside this method.</em></p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">isDragging(monitor)</code></strong>: Optional. By default, only the drag source that initiated the drag operation is considered to be dragging. You can override this behavior by defining a custom <code class=\"language-text\">isDragging</code> method. It might return something like <code class=\"language-text\">props.id === monitor.getItem().id</code>. Do this if the original component may be unmounted during the dragging and later “resurrected” with a different parent. For example, when moving a card across the lists in a Kanban board, you want it to retain the dragged appearance—even though technically, the component gets unmounted and a different one gets mounted every time you move it to another list. <em>Note: You may not call <code class=\"language-text\">monitor.isDragging()</code> inside this method.</em></p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">collect</code></strong>: Optional. The collecting function. It should return a plain object of the props to return for injection into your component. It receives two parameters, <code class=\"language-text\">monitor</code> and <code class=\"language-text\">props</code>. Read the <a href=\"/react-dnd/docs/overview\">overview</a> for an introduction to the monitors and the collecting function. See the collecting function described in detail in the next section.</p>\n</li>\n</ul>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"EXPERIMENTAL API - UNSTABLE"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"New to React DnD? "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/overview"},"children":[{"type":"text","value":"Read the overview"}]},{"type":"text","value":" before jumping into the docs."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"useDrag"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A hook to use the current component as a drag-source."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"import"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":" __EXPERIMENTAL_DND_HOOKS_THAT_MAY_CHANGE_AND_BREAK_MY_BUILD__ "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"as"}]},{"type":"text","value":" dnd "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"from"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'react-dnd'"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":" useDrag "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" dnd\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"function"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"DraggableComponent"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"props"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n\t"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":"collectedProps"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" ref"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"useDrag"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n\t\titem"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":" id"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" type "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n\t"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n\t"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"div ref"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"ref"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"..."}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"/"}]},{"type":"text","value":"div"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Parameters"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"spec"}]}]},{"type":"text","value":" Specification object, see below for details on how to construct this"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Return Value Array"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Index 0"}]}]},{"type":"text","value":": An object containing collected properties from the collect function. If no "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"collect"}]},{"type":"text","value":" function is defined, an empty object is returned."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Index 1"}]}]},{"type":"text","value":": The React ref to use. This is automatically created if no "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ref"}]},{"type":"text","value":" field is defined on the specification object. The ref must be attached to the draggable portion of the DOM."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Specification Object Members"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"item"}]}]},{"type":"text","value":": Required. A plain JavaScript object describing the data being dragged. This is the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"only"}]},{"type":"text","value":" information available to the drop targets about the drag source so it's important to pick the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"minimal"}]},{"type":"text","value":" data they need to know. You may be tempted to put a complex reference here, but you should try very hard to avoid doing this because it couples the drag sources and drop targets. It's a good idea to return something like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ type, id }"}]},{"type":"text","value":" from this method."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"item.type"}]},{"type":"text","value":" "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"must be set"}]},{"type":"text","value":", and it must be either a string, an ES6 symbol`. Only the "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/api/drop-target"},"children":[{"type":"text","value":"drop targets"}]},{"type":"text","value":" registered for the same type will react to this item. Read the "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/overview"},"children":[{"type":"text","value":"overview"}]},{"type":"text","value":" to learn more about the items and types."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ref"}]}]},{"type":"text","value":": Optional. A ref object to use to attach to the draggable element. If this is unset, one will be created ad returned."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"preview"}]}]},{"type":"text","value":": Optional. An HTML Element or a ref object attached to the dragPreview element. Consider using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"useDragPreview"}]},{"type":"text","value":" hook to create this for you."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"previewOptions"}]}]},{"type":"text","value":": Optional. A plain JavaScript object describing drag preview options."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"options"}]}]},{"type":"text","value":": Optional. A plain object. If some of the props to your component are not scalar (that is, are not primitive values or functions), specifying a custom"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"arePropsEqual(props, otherProps)"}]},{"type":"text","value":"function inside the"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"options"}]},{"type":"text","value":" object can improve the performance. Unless you have performance problems, don't worry about it."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"begin(monitor)"}]}]},{"type":"text","value":": Optional. Fired when a drag operation begins. Nothing needs to be returned, but if an object is returned it will override the default "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"item"}]},{"type":"text","value":" property of the spec."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"end(monitor)"}]}]},{"type":"text","value":": Optional. When the dragging stops, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"end"}]},{"type":"text","value":" is called. For every "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"begin"}]},{"type":"text","value":" call, a corresponding "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"end"}]},{"type":"text","value":" call is guaranteed. You may call "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"monitor.didDrop()"}]},{"type":"text","value":" to check whether or not the drop was handled by a compatible drop target. If it was handled, and the drop target specified a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"drop result"}]},{"type":"text","value":" by returning a plain object from its "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"drop()"}]},{"type":"text","value":" method, it will be available as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"monitor.getDropResult()"}]},{"type":"text","value":". This method is a good place to fire a Flux action. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Note: If the component is unmounted while dragging, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"component"}]},{"type":"text","value":" parameter is set to be "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":"."}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"canDrag(monitor)"}]}]},{"type":"text","value":": Optional. Use it to specify whether the dragging is currently allowed. If you want to always allow it, just omit this method. Specifying it is handy if you'd like to disable dragging based on some predicate over "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"props"}]},{"type":"text","value":". "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Note: You may not call "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"monitor.canDrag()"}]},{"type":"text","value":" inside this method."}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"isDragging(monitor)"}]}]},{"type":"text","value":": Optional. By default, only the drag source that initiated the drag operation is considered to be dragging. You can override this behavior by defining a custom "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"isDragging"}]},{"type":"text","value":" method. It might return something like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"props.id === monitor.getItem().id"}]},{"type":"text","value":". Do this if the original component may be unmounted during the dragging and later “resurrected” with a different parent. For example, when moving a card across the lists in a Kanban board, you want it to retain the dragged appearance—even though technically, the component gets unmounted and a different one gets mounted every time you move it to another list. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Note: You may not call "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"monitor.isDragging()"}]},{"type":"text","value":" inside this method."}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"collect"}]}]},{"type":"text","value":": Optional. The collecting function. It should return a plain object of the props to return for injection into your component. It receives two parameters, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"monitor"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"props"}]},{"type":"text","value":". Read the "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/docs/overview"},"children":[{"type":"text","value":"overview"}]},{"type":"text","value":" for an introduction to the monitors and the collecting function. See the collecting function described in detail in the next section."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"path":"/docs/api/use-drag","title":"useDrag"}},"toc":{"edges":[{"node":{"frontmatter":{"title":"FAQ","path":"/docs/faq"}}},{"node":{"frontmatter":{"title":"Testing","path":"/docs/testing"}}},{"node":{"frontmatter":{"title":"Troubleshooting","path":"/docs/troubleshooting"}}},{"node":{"frontmatter":{"title":"DropTargetConnector","path":"/docs/api/drop-target-connector"}}},{"node":{"frontmatter":{"title":"DragSourceConnector","path":"/docs/api/drag-source-connector"}}},{"node":{"frontmatter":{"title":"DragDropContext","path":"/docs/api/drag-drop-context"}}},{"node":{"frontmatter":{"title":"DragDropContextProvider","path":"/docs/api/drag-drop-context-provider"}}},{"node":{"frontmatter":{"title":"DragLayer","path":"/docs/api/drag-layer"}}},{"node":{"frontmatter":{"title":"DragLayerMonitor","path":"/docs/api/drag-layer-monitor"}}},{"node":{"frontmatter":{"title":"DragSourceMonitor","path":"/docs/api/drag-source-monitor"}}},{"node":{"frontmatter":{"title":"DropTargetMonitor","path":"/docs/api/drop-target-monitor"}}},{"node":{"frontmatter":{"title":"HTML5 Backend","path":"/docs/backends/html5"}}},{"node":{"frontmatter":{"title":"Touch Backend","path":"/docs/backends/touch-backend"}}},{"node":{"frontmatter":{"title":"Test Backend","path":"/docs/backends/test"}}},{"node":{"frontmatter":{"title":"useDrag","path":"/docs/api/use-drag"}}},{"node":{"frontmatter":{"title":"useDragPreview","path":"/docs/api/use-drag-preview"}}},{"node":{"frontmatter":{"title":"useDrag","path":"/docs/api/use-drag-layer"}}},{"node":{"frontmatter":{"title":"useDrop","path":"/docs/api/use-drop"}}},{"node":{"frontmatter":{"title":"Overview","path":"/docs/overview"}}},{"node":{"frontmatter":{"title":"DragSource","path":"/docs/api/drag-source"}}},{"node":{"frontmatter":{"title":"DropTarget","path":"/docs/api/drop-target"}}},{"node":{"frontmatter":{"title":"Tutorial","path":"/docs/tutorial"}}}]}},"pageContext":{}}