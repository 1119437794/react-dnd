{"version":3,"sources":["webpack:///./src/templates/docTemplate.tsx","webpack:///./src/util/processImagesInMarkdownAst.ts","webpack:///./src/util/renderHtmlAst.ts","webpack:///./src/components/doc.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","Template","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","_components_doc__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","props","currentPage","data","docPage","processImagesInMarkdownAst","ast","checkNode","node","tagName","properties","imageSrc","src","startsWith","withPrefix","children","forEach","child","log","require","renderAst","createElement","components","componentIndex","Compiler","HtmlContainer","styled","div","withConfig","displayName","componentId","Container","Gutter","Doc","_ref","react","processImages","err","htmlAst"],"mappings":"0FACAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,8BAAAG,IAAA,IAAAC,EAAAN,EAAA,GAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,KAIe,SAASI,EAASK,GAAY,IACpCC,EAAgBD,EAAME,KAAtBD,YAER,OACCJ,EAAA,cAACE,EAAA,EAAWC,EACXH,EAAA,cAACC,EAAA,EAAD,CAAKK,QAASF,KAKV,IAAML,EAAS,mGCAP,SAASQ,EAA2BC,IAInD,SAASC,EAAUC,GAClB,IAAKA,EACJ,OAED,GAAqB,QAAjBA,EAAKC,QAAmB,CAC3B,IAAMC,EAAaF,EAAKE,WAClBC,EAAoBD,GAAcA,EAAWE,KAAQ,GACvDD,EAASE,WAAW,aACvBH,EAAWE,IAAME,YAAWH,IAG9B,IAAMI,EAAWP,EAAKO,UAAY,GAClCA,EAASC,QAAQ,SAAAC,GAAK,OAAIV,EAAUU,KAfpCV,CAAUD,GCZX,IAAMY,EAAMC,EAAQ,IAARA,CAAiB,sBAIvBC,EAAY,IAHED,EAAQ,KAGV,CAAgB,CACjCE,8BACAC,WAAYC,mBACVC,SCAH,IAUMC,EAAgBC,IAAOC,IAAVC,WAAA,CAAAC,YAAA,qBAAAC,YAAA,gBAAGJ,CAAH,gCAKbK,EAAYL,IAAOC,IAAVC,WAAA,CAAAC,YAAA,iBAAAC,YAAA,gBAAGJ,CAAH,6CAMTM,EAASN,IAAOC,IAAVC,WAAA,CAAAC,YAAA,cAAAC,YAAA,gBAAGJ,CAAH,aAIGO,IAzBiB,SAAAC,GAAiB,IAAd9B,EAAc8B,EAAd9B,QAClC,OACC+B,EAAA,cAACJ,EAAD,KACCI,EAAA,cAACH,EAAD,MACAG,EAAA,cAACV,EAAD,KDFY,SAAuBjB,GACrC,IAGC,OAFA4B,EAAc5B,GACCY,EAAUZ,GAExB,MAAO6B,GACRnB,EAAI,2BAA4BmB,ICJfjB,CAAUhB,EAAQkC,UAClCH,EAAA,cAACH,EAAD","file":"component---src-templates-doc-template-tsx-03807633a44902582804.js","sourcesContent":["import { graphql } from 'gatsby'\nimport * as React from 'react'\nimport Doc from '../components/doc'\nimport Layout from '../components/layout'\n\nexport default function Template(props: any) {\n\tconst { currentPage } = props.data\n\n\treturn (\n\t\t<Layout {...props}>\n\t\t\t<Doc docPage={currentPage} />\n\t\t</Layout>\n\t)\n}\n\nexport const pageQuery = graphql`\n\tquery($path: String!) {\n\t\tcurrentPage: markdownRemark(frontmatter: { path: { eq: $path } }) {\n\t\t\thtml\n\t\t\thtmlAst\n\t\t\tfrontmatter {\n\t\t\t\tpath\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\n\t\ttoc: allMarkdownRemark(\n\t\t\tfilter: { frontmatter: { path: { regex: \"/^/docs/.*/\" } } }\n\t\t) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tpath\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { withPrefix } from 'gatsby'\n\nexport interface MarkdownAstNode {\n\ttagName?: string\n\ttype: string\n\tproperties?: { [key: string]: any }\n\tchildren: MarkdownAstNode[]\n\tdata: any\n}\n\nexport default function processImagesInMarkdownAst(ast: MarkdownAstNode): void {\n\tcheckNode(ast)\n}\n\nfunction checkNode(node: MarkdownAstNode) {\n\tif (!node) {\n\t\treturn\n\t}\n\tif (node.tagName === 'img') {\n\t\tconst properties = node.properties as { [key: string]: any }\n\t\tconst imageSrc: string = (properties && properties.src) || ''\n\t\tif (imageSrc.startsWith('/images')) {\n\t\t\tproperties.src = withPrefix(imageSrc)\n\t\t}\n\t}\n\tconst children = node.children || []\n\tchildren.forEach(child => checkNode(child))\n}\n","declare var require: any\nimport { createElement } from 'react'\nimport { componentIndex } from 'react-dnd-documentation-examples'\nimport processImages from './processImagesInMarkdownAst'\nconst log = require('debug')('site:renderHtmlAst')\nconst rehypeReact = require('rehype-react')\n\n// Registers the examples as custom components\nconst renderAst = new rehypeReact({\n\tcreateElement,\n\tcomponents: componentIndex,\n}).Compiler\n\nexport default function renderHtmlAst(node: any) {\n\ttry {\n\t\tprocessImages(node)\n\t\tconst result = renderAst(node)\n\t\treturn result\n\t} catch (err) {\n\t\tlog('error rendering doc page', err)\n\t}\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport renderAst from '../util/renderHtmlAst'\n\nexport interface DocProps {\n\tdocPage: {\n\t\thtmlAst: any\n\t\thtml: string\n\t}\n}\n\nconst Doc: React.FC<DocProps> = ({ docPage }) => {\n\treturn (\n\t\t<Container>\n\t\t\t<Gutter />\n\t\t\t<HtmlContainer>{renderAst(docPage.htmlAst)}</HtmlContainer>\n\t\t\t<Gutter />\n\t\t</Container>\n\t)\n}\n\nconst HtmlContainer = styled.div`\n\tmax-width: 100%;\n\twidth: 100%;\n`\n\nconst Container = styled.div`\n\tflex: 1;\n\tdisplay: flex;\n\tflex-direction: row;\n`\n\nconst Gutter = styled.div`\n\tflex: 1;\n`\n\nexport default Doc\n"],"sourceRoot":""}